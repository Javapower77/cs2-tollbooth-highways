using Unity.Entities;
using Unity.Collections;
using Colossal.Serialization.Entities;
using Domain.Enums;

namespace Domain.Components
{
    /// <summary>
    /// Component to store traffic insights and vehicle statistics for a tollbooth.
    /// Tracks the quantity and types of vehicles passing through the tollbooth.
    /// </summary>
    public struct TollBoothInsight : IComponentData, ISerializable
    {
        /// <summary>
        /// Total number of vehicles that have passed through this tollbooth.
        /// </summary>
        public int TotalVehiclesPassed;

        /// <summary>
        /// Total revenue generated by this tollbooth.
        /// </summary>
        public float TotalRevenue;

        /// <summary>
        /// Number of personal cars that have passed through.
        /// </summary>
        public int PersonalCarCount;

        /// <summary>
        /// Number of personal cars with trailers that have passed through.
        /// </summary>
        public int PersonalCarWithTrailerCount;

        /// <summary>
        /// Number of trucks that have passed through.
        /// </summary>
        public int TruckCount;

        /// <summary>
        /// Number of trucks with trailers that have passed through.
        /// </summary>
        public int TruckWithTrailerCount;

        /// <summary>
        /// Number of buses that have passed through.
        /// </summary>
        public int BusCount;

        /// <summary>
        /// Number of taxis that have passed through.
        /// </summary>
        public int TaxiCount;

        /// <summary>
        /// Number of park maintenance vehicles that have passed through.
        /// </summary>
        public int ParkMaintenanceCount;

        /// <summary>
        /// Number of road maintenance vehicles that have passed through.
        /// </summary>
        public int RoadMaintenanceCount;

        /// <summary>
        /// Number of ambulances that have passed through.
        /// </summary>
        public int AmbulanceCount;

        /// <summary>
        /// Number of evacuating transport vehicles that have passed through.
        /// </summary>
        public int EvacuatingTransportCount;

        /// <summary>
        /// Number of fire engines that have passed through.
        /// </summary>
        public int FireEngineCount;

        /// <summary>
        /// Number of garbage trucks that have passed through.
        /// </summary>
        public int GarbageTruckCount;

        /// <summary>
        /// Number of hearses that have passed through.
        /// </summary>
        public int HearseCount;

        /// <summary>
        /// Number of police cars that have passed through.
        /// </summary>
        public int PoliceCarCount;

        /// <summary>
        /// Number of post vans that have passed through.
        /// </summary>
        public int PostVanCount;

        /// <summary>
        /// Number of prisoner transport vehicles that have passed through.
        /// </summary>
        public int PrisonerTransportCount;

        /// <summary>
        /// Number of motorcycles that have passed through.
        /// </summary>
        public int MotorcycleCount;

        /// <summary>
        /// Frame when the insights were last updated.
        /// </summary>
        public uint LastUpdateFrame;

        /// <summary>
        /// Timestamp when the tollbooth started collecting data.
        /// </summary>
        public uint StartTrackingFrame;

        /// <summary>
        /// Adds a vehicle passage to the insights data.
        /// </summary>
        /// <param name="vehicleType">Type of vehicle that passed through</param>
        /// <param name="tollAmount">Amount of toll charged for this vehicle</param>
        /// <param name="currentFrame">Current simulation frame</param>
        public void AddVehiclePassage(VehicleType vehicleType, float tollAmount, uint currentFrame)
        {
            TotalVehiclesPassed++;
            TotalRevenue += tollAmount;
            LastUpdateFrame = currentFrame;

            // Update specific vehicle type count
            switch (vehicleType)
            {
                case VehicleType.PersonalCar:
                    PersonalCarCount++;
                    break;
                case VehicleType.PersonalCarWithTrailer:
                    PersonalCarWithTrailerCount++;
                    break;
                case VehicleType.Truck:
                    TruckCount++;
                    break;
                case VehicleType.TruckWithTrailer:
                    TruckWithTrailerCount++;
                    break;
                case VehicleType.Bus:
                    BusCount++;
                    break;
                case VehicleType.Taxi:
                    TaxiCount++;
                    break;
                case VehicleType.ParkMaintenance:
                    ParkMaintenanceCount++;
                    break;
                case VehicleType.RoadMaintenance:
                    RoadMaintenanceCount++;
                    break;
                case VehicleType.Ambulance:
                    AmbulanceCount++;
                    break;
                case VehicleType.EvacuatingTransport:
                    EvacuatingTransportCount++;
                    break;
                case VehicleType.FireEngine:
                    FireEngineCount++;
                    break;
                case VehicleType.GarbageTruck:
                    GarbageTruckCount++;
                    break;
                case VehicleType.Hearse:
                    HearseCount++;
                    break;
                case VehicleType.PoliceCar:
                    PoliceCarCount++;
                    break;
                case VehicleType.PostVan:
                    PostVanCount++;
                    break;
                case VehicleType.PrisonerTransport:
                    PrisonerTransportCount++;
                    break;
                case VehicleType.Motorcycle:
                    MotorcycleCount++;
                    break;
                case VehicleType.None:
                default:
                    // Unknown vehicle type - still count in total but don't categorize
                    break;
            }
        }

        /// <summary>
        /// Gets the count for a specific vehicle type.
        /// </summary>
        /// <param name="vehicleType">Type of vehicle to get count for</param>
        /// <returns>Number of vehicles of the specified type that have passed through</returns>
        public int GetVehicleCount(VehicleType vehicleType)
        {
            return vehicleType switch
            {
                VehicleType.PersonalCar => PersonalCarCount,
                VehicleType.PersonalCarWithTrailer => PersonalCarWithTrailerCount,
                VehicleType.Truck => TruckCount,
                VehicleType.TruckWithTrailer => TruckWithTrailerCount,
                VehicleType.Bus => BusCount,
                VehicleType.Taxi => TaxiCount,
                VehicleType.ParkMaintenance => ParkMaintenanceCount,
                VehicleType.RoadMaintenance => RoadMaintenanceCount,
                VehicleType.Ambulance => AmbulanceCount,
                VehicleType.EvacuatingTransport => EvacuatingTransportCount,
                VehicleType.FireEngine => FireEngineCount,
                VehicleType.GarbageTruck => GarbageTruckCount,
                VehicleType.Hearse => HearseCount,
                VehicleType.PoliceCar => PoliceCarCount,
                VehicleType.PostVan => PostVanCount,
                VehicleType.PrisonerTransport => PrisonerTransportCount,
                VehicleType.Motorcycle => MotorcycleCount,
                _ => 0
            };
        }

        /// <summary>
        /// Resets all vehicle counts and statistics to zero.
        /// </summary>
        /// <param name="currentFrame">Current simulation frame</param>
        public void ResetStatistics(uint currentFrame)
        {
            TotalVehiclesPassed = 0;
            TotalRevenue = 0.0f;
            PersonalCarCount = 0;
            PersonalCarWithTrailerCount = 0;
            TruckCount = 0;
            TruckWithTrailerCount = 0;
            BusCount = 0;
            TaxiCount = 0;
            ParkMaintenanceCount = 0;
            RoadMaintenanceCount = 0;
            AmbulanceCount = 0;
            EvacuatingTransportCount = 0;
            FireEngineCount = 0;
            GarbageTruckCount = 0;
            HearseCount = 0;
            PoliceCarCount = 0;
            PostVanCount = 0;
            PrisonerTransportCount = 0;
            MotorcycleCount = 0;
            LastUpdateFrame = currentFrame;
            StartTrackingFrame = currentFrame;
        }

        /// <summary>
        /// Gets the most common vehicle type that has passed through this tollbooth.
        /// </summary>
        /// <returns>The vehicle type with the highest count</returns>
        public VehicleType GetMostCommonVehicleType()
        {
            int maxCount = 0;
            VehicleType mostCommon = VehicleType.None;

            var vehicleTypes = new[]
            {
                (VehicleType.PersonalCar, PersonalCarCount),
                (VehicleType.PersonalCarWithTrailer, PersonalCarWithTrailerCount),
                (VehicleType.Truck, TruckCount),
                (VehicleType.TruckWithTrailer, TruckWithTrailerCount),
                (VehicleType.Bus, BusCount),
                (VehicleType.Taxi, TaxiCount),
                (VehicleType.ParkMaintenance, ParkMaintenanceCount),
                (VehicleType.RoadMaintenance, RoadMaintenanceCount),
                (VehicleType.Ambulance, AmbulanceCount),
                (VehicleType.EvacuatingTransport, EvacuatingTransportCount),
                (VehicleType.FireEngine, FireEngineCount),
                (VehicleType.GarbageTruck, GarbageTruckCount),
                (VehicleType.Hearse, HearseCount),
                (VehicleType.PoliceCar, PoliceCarCount),
                (VehicleType.PostVan, PostVanCount),
                (VehicleType.PrisonerTransport, PrisonerTransportCount),
                (VehicleType.Motorcycle, MotorcycleCount)
            };

            foreach (var (type, count) in vehicleTypes)
            {
                if (count > maxCount)
                {
                    maxCount = count;
                    mostCommon = type;
                }
            }

            return mostCommon;
        }

        /// <summary>
        /// Calculates the average revenue per vehicle.
        /// </summary>
        /// <returns>Average revenue per vehicle, or 0 if no vehicles have passed</returns>
        public float GetAverageRevenuePerVehicle()
        {
            return TotalVehiclesPassed > 0 ? TotalRevenue / TotalVehiclesPassed : 0.0f;
        }

        public void Serialize<TWriter>(TWriter writer) where TWriter : IWriter
        {
            writer.Write(TotalVehiclesPassed);
            writer.Write(TotalRevenue);
            writer.Write(PersonalCarCount);
            writer.Write(PersonalCarWithTrailerCount);
            writer.Write(TruckCount);
            writer.Write(TruckWithTrailerCount);
            writer.Write(BusCount);
            writer.Write(TaxiCount);
            writer.Write(ParkMaintenanceCount);
            writer.Write(RoadMaintenanceCount);
            writer.Write(AmbulanceCount);
            writer.Write(EvacuatingTransportCount);
            writer.Write(FireEngineCount);
            writer.Write(GarbageTruckCount);
            writer.Write(HearseCount);
            writer.Write(PoliceCarCount);
            writer.Write(PostVanCount);
            writer.Write(PrisonerTransportCount);
            writer.Write(MotorcycleCount);
            writer.Write(LastUpdateFrame);
            writer.Write(StartTrackingFrame);
        }

        public void Deserialize<TReader>(TReader reader) where TReader : IReader
        {
            reader.Read(out TotalVehiclesPassed);
            reader.Read(out TotalRevenue);
            reader.Read(out PersonalCarCount);
            reader.Read(out PersonalCarWithTrailerCount);
            reader.Read(out TruckCount);
            reader.Read(out TruckWithTrailerCount);
            reader.Read(out BusCount);
            reader.Read(out TaxiCount);
            reader.Read(out ParkMaintenanceCount);
            reader.Read(out RoadMaintenanceCount);
            reader.Read(out AmbulanceCount);
            reader.Read(out EvacuatingTransportCount);
            reader.Read(out FireEngineCount);
            reader.Read(out GarbageTruckCount);
            reader.Read(out HearseCount);
            reader.Read(out PoliceCarCount);
            reader.Read(out PostVanCount);
            reader.Read(out PrisonerTransportCount);
            reader.Read(out MotorcycleCount);
            reader.Read(out LastUpdateFrame);
            reader.Read(out StartTrackingFrame);
        }
    }
}