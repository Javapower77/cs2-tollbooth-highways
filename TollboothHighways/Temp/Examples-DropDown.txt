This is after deobfuscation of:
game-ui/common/input/dropdown/dropdown.tsx <- createContext
game-ui/common/input/dropdown/dropdown-toggle.tsx <- useContext
game-ui/common/input/dropdown/items/dropdown-item.tsx <- useContext

// Vehicle type definitions for dropdowns
interface VehicleType {
    id: string;
    name: string;
    toll: number;
    icon?: string;
}


// Additional values for progress bar examples
    const m_VehiclesPassed = 125;
    const m_DailyTarget = 500;
    const m_MaintenanceLevel = 85;
    const m_TrafficLoad = 65;
    const m_CollectionEfficiency = 92;

    const vehicleTypes: VehicleType[] = [
        { id: 'car', name: 'Personal Vehicle', toll: 5.0, icon: Car01Src },
        { id: 'bus', name: 'Public Bus', toll: 15.0, icon: Bus01Src },
        { id: 'truck', name: 'Freight Truck', toll: 25.0, icon: NA_TruckTractor01Src },
        { id: 'emergency', name: 'Emergency Vehicle', toll: 0.0, icon: EU_Ambulance01Src },
        { id: 'service', name: 'Service Vehicle', toll: 10.0, icon: NA_PostVan01Src },
    ];

    const qualityOptions = [
        { id: 'low', name: 'Low Quality', description: 'Basic toll collection', efficiency: 70 },
        { id: 'medium', name: 'Medium Quality', description: 'Standard toll collection', efficiency: 85 },
        { id: 'high', name: 'High Quality', description: 'Advanced toll collection', efficiency: 95 },
        { id: 'ultra', name: 'Ultra Quality', description: 'Premium toll collection', efficiency: 99 },
    ];

    const timeOfDayOptions = [
        { id: 'peak', name: 'Peak Hours', multiplier: 1.5, description: 'Higher rates during busy times' },
        { id: 'normal', name: 'Normal Hours', multiplier: 1.0, description: 'Standard toll rates' },
        { id: 'night', name: 'Night Hours', multiplier: 0.8, description: 'Reduced rates for night time' },
        { id: 'weekend', name: 'Weekend', multiplier: 1.2, description: 'Weekend pricing' },
    ];

    const paymentMethods = [
        { id: 'electronic', name: 'Electronic Only', speed: 'Fast', description: 'Automatic electronic toll collection' },
        { id: 'cash', name: 'Cash Only', speed: 'Slow', description: 'Manual cash collection booth' },
        { id: 'mixed', name: 'Mixed Payment', speed: 'Medium', description: 'Both electronic and cash accepted' },
    ];

    // State for dropdowns
    const [selectedQuality, setSelectedQuality] = useState('high');
    const [selectedVehicleType, setSelectedVehicleType] = useState('car');
    const [selectedTollRate, setSelectedTollRate] = useState(5.0);
    const [selectedTimeOfDay, setSelectedTimeOfDay] = useState('normal');
    const [selectedPaymentMethod, setSelectedPaymentMethod] = useState('mixed');

    // Handle quality selection
    const handleQualityChange = (value: string) => {
        console.log("Quality changed to:", value);
        setSelectedQuality(value);
        // Trigger any backend updates here
        trigger(mod.id, "setTollboothQuality", value);
    };

    // Handle vehicle type selection
    const handleVehicleTypeChange = (value: string) => {
        console.log("Vehicle type changed to:", value);
        setSelectedVehicleType(value);
        const vehicle = vehicleTypes.find(v => v.id === value);
        if (vehicle) {
            setSelectedTollRate(vehicle.toll);
            // Trigger backend update for toll rates
            trigger(mod.id, "setVehicleTollRate", value, vehicle.toll);
        }
    };

    // Handle time of day selection
    const handleTimeOfDayChange = (value: string) => {
        console.log("Time of day changed to:", value);
        setSelectedTimeOfDay(value);
        trigger(mod.id, "setTimeOfDayPricing", value);
    };

    // Handle payment method selection
    const handlePaymentMethodChange = (value: string) => {
        console.log("Payment method changed to:", value);
        setSelectedPaymentMethod(value);
        trigger(mod.id, "setPaymentMethod", value);
    };

    // Helper functions
    const getCurrentQualityName = () => {
        const quality = qualityOptions.find(q => q.id === selectedQuality);
        return quality?.name || 'Unknown';
    };

    const getCurrentVehicleName = () => {
        const vehicle = vehicleTypes.find(v => v.id === selectedVehicleType);
        return vehicle?.name || 'Unknown';
    };

    const getCurrentTimeOfDayName = () => {
        const timeOfDay = timeOfDayOptions.find(t => t.id === selectedTimeOfDay);
        return timeOfDay?.name || 'Unknown';
    };

    const getCurrentPaymentMethodName = () => {
        const paymentMethod = paymentMethods.find(p => p.id === selectedPaymentMethod);
        return paymentMethod?.name || 'Unknown';
    };

   // Create my custom theme
const createTollboothDropdownTheme = (variant: 'default' | 'compact' | 'highContrast' = 'default') => ({
    ...CS2VanillaUIResolver.instance.DropdownTheme.dropdownToggle,
    dropdownToggle: `${tollboothStyles.tollboothDropdownToggle} ${variant !== 'default' ? tollboothStyles[variant] : ''}`,
    label: tollboothStyles.tollboothLabel,
    indicator: tollboothStyles.tollboothIndicator,
    dropdownPopup: tollboothStyles.tollboothDropdownPopup,
    dropdownMenu: tollboothStyles.tollboothDropdownMenu,
    scrollable: tollboothStyles.tollboothScrollable,
    dropdownItem: tollboothStyles.tollboothDropdownItem,
    hiddenIcon: "Media/Glyphs/StrokeArrowDown.svg",
    visibleIcon: "Media/Glyphs/StrokeArrowUp.svg",
});


    const tollboothTheme = createTollboothDropdownTheme();
    const compactTheme = createTollboothDropdownTheme('compact');


            {/* Example 1: Vehicle Type Selection with Icons */}
            <InfoSection focusKey={CS2VanillaUIResolver.instance.FOCUS_DISABLED} disableFocus={true}>
                <InfoRow
                    left={"Vehicle Type Configuration"}
                    right={
                        <CS2VanillaUIResolver.instance.Dropdown
                            focusKey="vehicle-type-dropdown"
                            onToggle={(visible) => console.log("Vehicle dropdown toggled:", visible)}
                            content={
                                <>
                                    {vehicleTypes.map(vehicle => (
                                        <CS2VanillaUIResolver.instance.DropdownItem
                                            key={vehicle.id}
                                            value={vehicle.id}
                                            selected={vehicle.id === selectedVehicleType}
                                            onChange={handleVehicleTypeChange}
                                            focusKey={`vehicle-${vehicle.id}`}
                                        >
                                            <div style={{ display: 'flex', alignItems: 'center', gap: '12px', width: '100%' }}>
                                                {vehicle.icon && (
                                                    <img
                                                        src={vehicle.icon}
                                                        style={{ width: '32px', height: '32px' }}
                                                        alt=""
                                                    />
                                                )}
                                                <div style={{ flex: 1 }}>
                                                    <div><strong>{vehicle.name}</strong></div>
                                                    <div style={{ fontSize: '0.9em', opacity: 0.8 }}>
                                                        Toll: ${vehicle.toll.toFixed(2)}
                                                    </div>
                                                </div>
                                            </div>
                                        </CS2VanillaUIResolver.instance.DropdownItem>
                                    ))}
                                </>
                            }
                        >
                            <CS2VanillaUIResolver.instance.DropdownToggle
                                showHint={true}
                                tooltipLabel="Select vehicle type to configure toll rates"
                            >
                                <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>
                                    {vehicleTypes.find(v => v.id === selectedVehicleType)?.icon && (
                                        <img
                                            src={vehicleTypes.find(v => v.id === selectedVehicleType)?.icon}
                                            style={{ width: '24px', height: '24px' }}
                                            alt=""
                                        />
                                    )}
                                    <span>{getCurrentVehicleName()}</span>
                                    <span style={{ marginLeft: 'auto', opacity: 0.8 }}>
                                        ${selectedTollRate.toFixed(2)}
                                    </span>
                                </div>
                            </CS2VanillaUIResolver.instance.DropdownToggle>
                        </CS2VanillaUIResolver.instance.Dropdown>
                    }
                    tooltip={DescriptionTooltip("Vehicle Type Rates", "Configure toll rates for different vehicle types")}
                    uppercase={true}
                    disableFocus={true}
                    subRow={false}
                    className={InfoRowTheme.infoRow}
                />
            </InfoSection>

            {/* Example 2: Quality Selection with Descriptions */}
            <InfoSection focusKey={CS2VanillaUIResolver.instance.FOCUS_DISABLED} disableFocus={true}>
                <InfoRow
                    left={"Tollbooth Quality"}
                    right={
                        <CS2VanillaUIResolver.instance.Dropdown
                            focusKey="quality-dropdown"
                            content={
                                <>
                                    {qualityOptions.map(option => (
                                        <CS2VanillaUIResolver.instance.DropdownItem
                                            key={option.id}
                                            value={option.id}
                                            selected={option.id === selectedQuality}
                                            onChange={handleQualityChange}
                                            focusKey={`quality-${option.id}`}
                                        >
                                            <div>
                                                <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                                                    <strong>{option.name}</strong>
                                                    <span style={{ fontSize: '0.8em', opacity: 0.7 }}>
                                                        {option.efficiency}% efficiency
                                                    </span>
                                                </div>
                                                <div style={{ fontSize: '0.9em', opacity: 0.8, marginTop: '4px' }}>
                                                    {option.description}
                                                </div>
                                            </div>
                                        </CS2VanillaUIResolver.instance.DropdownItem>
                                    ))}
                                </>
                            }
                        >
                            <CS2VanillaUIResolver.instance.DropdownToggle
                                showHint={true}
                                tooltipLabel="Higher quality tollbooths process vehicles faster"
                            >
                                {getCurrentQualityName()}
                            </CS2VanillaUIResolver.instance.DropdownToggle>
                        </CS2VanillaUIResolver.instance.Dropdown>
                    }
                    tooltip={DescriptionTooltip("Tollbooth Quality", "Higher quality tollbooths process vehicles faster and generate more revenue")}
                    uppercase={true}
                    disableFocus={true}
                    subRow={false}
                    className={InfoRowTheme.infoRow}
                />
            </InfoSection>

            {/* Example 3: Time-based Pricing */}
            <InfoSection focusKey={CS2VanillaUIResolver.instance.FOCUS_DISABLED} disableFocus={true}>
                <InfoRow
                    left={"Time-based Pricing"}
                    right={
                        <CS2VanillaUIResolver.instance.Dropdown
                            focusKey="time-pricing-dropdown"
                            content={
                                <>
                                    {timeOfDayOptions.map(timeOption => (
                                        <CS2VanillaUIResolver.instance.DropdownItem
                                            key={timeOption.id}
                                            value={timeOption.id}
                                            selected={timeOption.id === selectedTimeOfDay}
                                            onChange={handleTimeOfDayChange}
                                            focusKey={`time-${timeOption.id}`}
                                        >
                                            <div>
                                                <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                                                    <strong>{timeOption.name}</strong>
                                                    <span style={{ 
                                                        fontSize: '0.8em', 
                                                        color: timeOption.multiplier > 1 ? '#ff6b6b' : timeOption.multiplier < 1 ? '#51cf66' : '#868e96'
                                                    }}>
                                                        {timeOption.multiplier}x
                                                    </span>
                                                </div>
                                                <div style={{ fontSize: '0.9em', opacity: 0.8, marginTop: '4px' }}>
                                                    {timeOption.description}
                                                </div>
                                            </div>
                                        </CS2VanillaUIResolver.instance.DropdownItem>
                                    ))}
                                </>
                            }
                        >
                            <CS2VanillaUIResolver.instance.DropdownToggle
                                showHint={true}
                                tooltipLabel="Configure time-based toll pricing"
                            >
                                <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', width: '100%' }}>
                                    <span>{getCurrentTimeOfDayName()}</span>
                                    <span style={{ fontSize: '0.9em', opacity: 0.7 }}>
                                        {timeOfDayOptions.find(t => t.id === selectedTimeOfDay)?.multiplier}x
                                    </span>
                                </div>
                            </CS2VanillaUIResolver.instance.DropdownToggle>
                        </CS2VanillaUIResolver.instance.Dropdown>
                    }
                    tooltip={DescriptionTooltip("Time-based Pricing", "Adjust toll rates based on time of day or traffic conditions")}
                    uppercase={true}
                    disableFocus={true}
                    subRow={false}
                    className={InfoRowTheme.infoRow}
                />
            </InfoSection>

            {/* Example 4: Payment Method Selection */}
            <InfoSection focusKey={CS2VanillaUIResolver.instance.FOCUS_DISABLED} disableFocus={true}>
                <InfoRow
                    left={"Payment Method"}
                    right={
                        <CS2VanillaUIResolver.instance.Dropdown
                            focusKey="payment-method-dropdown"
                            content={
                                <>
                                    {paymentMethods.map(method => (
                                        <CS2VanillaUIResolver.instance.DropdownItem
                                            key={method.id}
                                            value={method.id}
                                            selected={method.id === selectedPaymentMethod}
                                            onChange={handlePaymentMethodChange}
                                            focusKey={`payment-${method.id}`}
                                        >
                                            <div>
                                                <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                                                    <strong>{method.name}</strong>
                                                    <span style={{ 
                                                        fontSize: '0.8em', 
                                                        padding: '2px 6px',
                                                        borderRadius: '8px',
                                                        backgroundColor: method.speed === 'Fast' ? '#51cf66' : method.speed === 'Medium' ? '#ffd43b' : '#ff8787',
                                                        color: 'white'
                                                    }}>
                                                        {method.speed}
                                                    </span>
                                                </div>
                                                <div style={{ fontSize: '0.9em', opacity: 0.8, marginTop: '4px' }}>
                                                    {method.description}
                                                </div>
                                            </div>
                                        </CS2VanillaUIResolver.instance.DropdownItem>
                                    ))}
                                </>
                            }
                        >
                            <CS2VanillaUIResolver.instance.DropdownToggle
                                showHint={true}
                                tooltipLabel="Select preferred payment collection method"
                            >
                                <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', width: '100%' }}>
                                    <span>{getCurrentPaymentMethodName()}</span>
                                    <span style={{ fontSize: '0.9em', opacity: 0.7 }}>
                                        {paymentMethods.find(p => p.id === selectedPaymentMethod)?.speed}
                                    </span>
                                </div>
                            </CS2VanillaUIResolver.instance.DropdownToggle>
                        </CS2VanillaUIResolver.instance.Dropdown>
                    }
                    tooltip={DescriptionTooltip("Payment Method", "Choose how tolls are collected at this booth")}
                    uppercase={true}
                    disableFocus={true}
                    subRow={false}
                    className={InfoRowTheme.infoRow}
                />
            </InfoSection>

            {/* Example 5: Simple Options Dropdown */}
            <InfoSection focusKey={CS2VanillaUIResolver.instance.FOCUS_DISABLED} disableFocus={true}>
                <InfoRow
                    left={"Quick Actions"}
                    right={
                        <CS2VanillaUIResolver.instance.Dropdown
                            focusKey="quick-actions-dropdown"
                            content={
                                <>
                                    <CS2VanillaUIResolver.instance.DropdownItem
                                        value="collect-all"
                                        onChange={(value) => {
                                            console.log("Collect all tolls");
                                            trigger(mod.id, "collectAllTolls");
                                        }}
                                    >
                                        💰 Collect All Tolls
                                    </CS2VanillaUIResolver.instance.DropdownItem>
                                    <CS2VanillaUIResolver.instance.DropdownItem
                                        value="maintenance"
                                        onChange={(value) => {
                                            console.log("Perform maintenance");
                                            trigger(mod.id, "performMaintenance");
                                        }}
                                    >
                                        🔧 Perform Maintenance
                                    </CS2VanillaUIResolver.instance.DropdownItem>
                                    <CS2VanillaUIResolver.instance.DropdownItem
                                        value="reset-stats"
                                        onChange={(value) => {
                                            console.log("Reset statistics");
                                            trigger(mod.id, "resetStatistics");
                                        }}
                                    >
                                        📊 Reset Statistics
                                    </CS2VanillaUIResolver.instance.DropdownItem>
                                    <CS2VanillaUIResolver.instance.DropdownItem
                                        value="upgrade"
                                        onChange={(value) => {
                                            console.log("Upgrade tollbooth");
                                            trigger(mod.id, "upgradeTollbooth");
                                        }}
                                    >
                                        ⬆️ Upgrade Booth
                                    </CS2VanillaUIResolver.instance.DropdownItem>
                                </>
                            }
                        >
                            <CS2VanillaUIResolver.instance.DropdownToggle
                                showHint={true}
                                tooltipLabel="Quick management actions"
                            >
                                ⚙️ Actions
                            </CS2VanillaUIResolver.instance.DropdownToggle>
                        </CS2VanillaUIResolver.instance.Dropdown>
                    }
                    tooltip={DescriptionTooltip("Quick Actions", "Perform common tollbooth management tasks")}
                    uppercase={true}
                    disableFocus={true}
                    subRow={false}
                    className={InfoRowTheme.infoRow}
                />
            </InfoSection>

            {/* Vehicle Type Selection with Custom Theme */}
            <InfoSection focusKey={CS2VanillaUIResolver.instance.FOCUS_DISABLED} disableFocus={true}>
                <InfoRow
                    left={"Vehicle Type Configuration"}
                    right={
                        <CS2VanillaUIResolver.instance.Dropdown
                            focusKey="vehicle-type-dropdown"
                            theme={tollboothTheme}
                            className={tollboothStyles.tollboothDropdown}
                            onToggle={(visible) => console.log("Vehicle dropdown toggled:", visible)}
                            content={
                                <>
                                    {vehicleTypes.map(vehicle => (
                                        <CS2VanillaUIResolver.instance.DropdownItem
                                            key={vehicle.id}
                                            value={vehicle.id}
                                            selected={vehicle.id === selectedVehicleType}
                                            onChange={handleVehicleTypeChange}
                                            focusKey={`vehicle-${vehicle.id}`}
                                            className={tollboothStyles.vehicleDropdownItem}
                                        >
                                            <div className={tollboothStyles.vehicleDropdownItem}>
                                                {vehicle.icon && (
                                                    <img
                                                        src={vehicle.icon}
                                                        className={tollboothStyles.vehicleIcon}
                                                        alt=""
                                                    />
                                                )}
                                                <div className={tollboothStyles.vehicleInfo}>
                                                    <div className={tollboothStyles.vehicleName}>{vehicle.name}</div>
                                                    <div className={tollboothStyles.vehicleToll}>
                                                        Base toll rate
                                                    </div>
                                                </div>
                                                <div className={tollboothStyles.vehiclePrice}>
                                                    ${vehicle.toll.toFixed(2)}
                                                </div>
                                            </div>
                                        </CS2VanillaUIResolver.instance.DropdownItem>
                                    ))}
                                </>
                            }
                        >
                            <CS2VanillaUIResolver.instance.DropdownToggle
                                showHint={true}
                                tooltipLabel="Select vehicle type to configure toll rates"
                            >
                                <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>
                                    {vehicleTypes.find(v => v.id === selectedVehicleType)?.icon && (
                                        <img
                                            src={vehicleTypes.find(v => v.id === selectedVehicleType)?.icon}
                                            style={{ width: '24px', height: '24px' }}
                                            alt=""
                                        />
                                    )}
                                    <span>{getCurrentVehicleName()}</span>
                                    <span style={{ marginLeft: 'auto', opacity: 0.8 }}>
                                        ${selectedTollRate.toFixed(2)}
                                    </span>
                                </div>
                            </CS2VanillaUIResolver.instance.DropdownToggle>
                        </CS2VanillaUIResolver.instance.Dropdown>
                    }
                    tooltip={DescriptionTooltip("Vehicle Type Rates", "Configure toll rates for different vehicle types")}
                    uppercase={true}
                    disableFocus={true}
                    subRow={false}
                    className={InfoRowTheme.infoRow}
                />
            </InfoSection>

            {/* Quality Selection with Custom Theme */}
            <InfoSection focusKey={CS2VanillaUIResolver.instance.FOCUS_DISABLED} disableFocus={true}>
                <InfoRow
                    left={"Tollbooth Quality"}
                    right={
                        <CS2VanillaUIResolver.instance.Dropdown
                            focusKey="quality-dropdown"
                            theme={compactTheme}
                            className={`${tollboothStyles.tollboothDropdown} ${tollboothStyles.compact}`}
                            content={
                                <>
                                    {qualityOptions.map(option => (
                                        <CS2VanillaUIResolver.instance.DropdownItem
                                            key={option.id}
                                            value={option.id}
                                            selected={option.id === selectedQuality}
                                            onChange={handleQualityChange}
                                            focusKey={`quality-${option.id}`}
                                            className={tollboothStyles.qualityDropdownItem}
                                        >
                                            <div>
                                                <div className={tollboothStyles.qualityName}>{option.name}</div>
                                                <div className={tollboothStyles.qualityDescription}>
                                                    {option.description}
                                                </div>
                                                <div className={tollboothStyles.qualityEfficiency}>
                                                    {option.efficiency}% efficiency
                                                </div>
                                            </div>
                                        </CS2VanillaUIResolver.instance.DropdownItem>
                                    ))}
                                </>
                            }
                        >
                            <CS2VanillaUIResolver.instance.DropdownToggle
                                showHint={true}
                                tooltipLabel="Higher quality tollbooths process vehicles faster"
                            >
                                {getCurrentQualityName()}
                            </CS2VanillaUIResolver.instance.DropdownToggle>
                        </CS2VanillaUIResolver.instance.Dropdown>
                    }
                    tooltip={DescriptionTooltip("Tollbooth Quality", "Higher quality tollbooths process vehicles faster and generate more revenue")}
                    uppercase={true}
                    disableFocus={true}
                    subRow={false}
                    className={InfoRowTheme.infoRow}
                />
            </InfoSection>